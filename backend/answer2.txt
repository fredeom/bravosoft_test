// Выберите технологию(БД) для реализации хранения данных. Обоснуйте свой выбор письменно.

Сперва нужно выбрать между SQL(например, sqlite3) и NoSQL(MongoDB) моделей БД.
Т.к. даннных немного, действия над ними вполне стандартны, а описание их структуры подходит под реляционные таблицы,
то я выбираю sqlite3.

// Нарисуйте архитектуру хранения этих данных в соответсвии с требованиями
// заказчика и выбранной вами технологии.

Нужно всего две таблицы: Dragon, Human

Поля таблицы Dragon:
0. id (случайным образом созданное число, уникальное в рамках таблицы)
1. Вид дракона
2. Цвет дракона
3. Имя дракона
4. Порядковый номер
5. Место рождения
6. Дата рождения
7. Состояние здоровья
8. Дата последней кормежки
9. id Человека (foreign key to Human[id])

Поля таблицы Human:
1. Табельный номер
2. ФИО
3. Email
4. id (случайным образом созданное число, уникальное в рамках таблицы)
5. masterId (foreign key to [4], тогда у этого человека есть начальник и он - пастух, но может быть NULL, тогда у этого человека нет начальника, т.е. он сам начальник)

Периодически на сервере нужно проверять всех драконов и удалять информацию о драконе если он умер(Руководителям должны приходить на почту уведомления, если сотояние здоровья дракона, закрпеленного за одним из их пастухов, изменилось на отрицательное. Либо, если дата последней кормежки меньше текущей на 2.

// Опишите REST API запросы для получения данных из вашей бд с клиента.
// Например: GET /api/v1/dragon/:id/info
// Опишите: Какую конкретную задачу решает каждый из запросов. Какую
// информацию возвращает тот или иной запрос.

- Получение информации о драконе (на стороне сервера происходит проверка и если запрос составлен пастухом, то разрешается просмотр только его драконов)
GET /api/v1/dragon/:id/info
Возращает:
{
  ... поля таблицы Dragon
  error: <пустую строку если нет ошибок, и сообщение, что такого дракона нет, либо сообщение о прочих ошибках в противном случае>
}

- Обновление информации о драконе (на стороне сервера происходит проверка и если запрос составлен пастухом для его дракона, то только дату кормёжки и состояние здоровья он может изменить)
PUT /api/v1/dragon/:id/info
Возвращает:
{
  error: <пустую строку если нет ошибки, либо текст ошибки>
}

- Получить статистику о состоянии всех своих драконов, в процентном соотношении. Параметрами можно указать какие поля дракона выводить.
GET /api/v1/dragon/stat
{
  stats: [{
    ...<значения указаных в запросе полей>,
    health: <состоянии всех своих драконов, в процентном соотношении>
  }, ...],
  error: <пустую строку если нет ошибки, либо текст ошибки>
}

- Получение информации о пастухе или руководителе:
GET /api/v1/person/:id/info
{
  ... поля таблицы Human
  error: <пустую строку если нет ошибок, и сообщение, что такого человека нет, либо сообщение о прочих ошибках в противном случае>
}
